#!/bin/bash
# =====================================================
# HNG DevOps Stage 1 Project - Remote Deployment Script
# Author: AiyusTech
# Description: Deploys a Dockerized app directly on the server
# =====================================================

set -e

# === LOGGING SETUP ===
LOG_DIR="logs"
mkdir -p "$LOG_DIR"

LOG_FILE="$LOG_DIR/deploy_$(date +%Y%m%d_%H%M%S).log"
exec > >(tee -a "$LOG_FILE") 2>&1
trap 'echo -e "\n[❌ ERROR] Something failed. Check $LOG_FILE for details.\n" >&2' ERR

# === HELPER FUNCTIONS ===
info() { echo -e "[INFO] $1"; }
success() { echo -e "[SUCCESS] $1"; }
warn() { echo -e "[WARNING] $1"; }

# =====================================================
# STEP 1 — COLLECT USER INPUT
# =====================================================
echo -e "\n=== 🧠 Deployment Setup ==="

read -p "Enter GitHub Repo URL: " REPO_URL
read -p "Enter GitHub Personal Access Token: " PAT
read -p "Enter Branch name (default: main): " BRANCH
BRANCH=${BRANCH:-main}
read -p "Enter SSH Username: " SSH_USER
read -p "Enter Server IP Address: " SERVER_IP
read -p "Enter SSH Key Path: " SSH_KEY
read -p "Enter Application Port (local container port): " APP_PORT

# =====================================================
# STEP 2 — PREPARE REMOTE DIRECTORY
# =====================================================
info "Preparing remote directory for deployment..."

ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" <<EOF
  set -e
  sudo rm -rf /home/$SSH_USER/app
  mkdir -p /home/$SSH_USER/app
  sudo chown -R $SSH_USER:$SSH_USER /home/$SSH_USER/app
EOF

success "Remote directory ready."

# =====================================================
# STEP 3 — CLONE OR UPDATE REPO ON SERVER
# =====================================================
info "Cloning repository on remote server..."

ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<EOF
  set -e
  cd /home/$SSH_USER/app

  if [ -d ".git" ]; then
    echo "Repository exists. Pulling latest changes..."
    git pull
  else
    git clone -b $BRANCH https://${PAT}@${REPO_URL#https://} .
  fi
EOF

success "Repository cloned/updated on remote server."

# =====================================================
# STEP 4 — INSTALL DEPENDENCIES
# =====================================================
info "Installing Docker, Docker Compose, and Nginx..."

ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<'EOF'
  set -e
  sudo apt update -y
  sudo apt install -y docker.io docker-compose nginx
  sudo systemctl enable docker
  sudo systemctl start docker
  sudo usermod -aG docker $USER
  docker --version
  nginx -v
EOF

success "Dependencies installed successfully."

# =====================================================
# STEP 5 — BUILD AND RUN DOCKER CONTAINER
# =====================================================
info "Building and running Docker container..."

ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<EOF
  set -e
  cd /home/$SSH_USER/app

  echo "Building Docker image..."
  docker build -t myapp .

  echo "Stopping and removing existing container if it exists..."
  if [ "\$(docker ps -a -q -f name=myapp)" ]; then
    docker rm -f myapp
  fi

  echo "Running new container..."
  docker run -d -p $APP_PORT:80 --name myapp myapp
EOF

success "Docker container deployed successfully."

# =====================================================
# STEP 6 — CONFIGURE NGINX REVERSE PROXY
# =====================================================
info "Configuring Nginx reverse proxy..."

ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<EOF
sudo bash -c 'cat > /etc/nginx/sites-available/myapp <<NGINX_CONF
server {
    listen 80;
    server_name _;

    location / {
        proxy_pass http://127.0.0.1:$APP_PORT;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_cache_bypass \$http_upgrade;
    }
}
NGINX_CONF'

sudo ln -sf /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp
sudo nginx -t
sudo systemctl reload nginx
EOF

success "Nginx configured successfully."

# =====================================================
# STEP 7 — VALIDATE DEPLOYMENT
# =====================================================
info "Validating deployment..."

ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<'EOF'
docker ps
curl -I localhost
EOF

success "Deployment complete. Visit your server IP in the browser!"

# =====================================================
# STEP 8 — CLEANUP OPTION
# =====================================================
if [[ "$1" == "--cleanup" ]]; then
  warn "Running cleanup operation..."
  ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<'EOF'
    docker stop $(docker ps -q) || true
    docker system prune -af
    sudo rm -rf ~/app
    sudo rm -f /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp
    sudo systemctl reload nginx
EOF
  success "All resources removed successfully."
  exit 0
fi

echo -e "\n====================================================="
success "🎉 Deployment completed successfully!"
echo -e "Logs saved in: $LOG_FILE"
echo -e "=====================================================\n"
